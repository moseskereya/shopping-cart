{"version":3,"sources":["components/counter.jsx","components/counters.jsx","components/navBar.jsx","App.js","serviceWorker.js","index.js"],"names":["Counter","className","this","props","counter","value","onClick","onIncrement","type","onDelete","id","Component","Counters","state","counters","handleIncrement","index","indexOf","setState","handleReset","map","c","handleDelete","e","filter","key","Nav","href","App","Fragment","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6e023308.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nclass Counter extends Component {\r\n    render() {\r\n        return ( \r\n         <div>\r\n        <span className=\"num\">{this.props.counter.value}</span>\r\n         <button className=\"btns\" onClick={() => this.props.onIncrement(this.props.counter)} type=\"submit\">increment</button>\r\n         <button onClick={() =>this.props.onDelete(this.props.counter.id)} type=\"reset\" className=\"btn\">Delete</button>\r\n          </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Counter;\r\n\r\n\r\n\r\n  \r\n// export default MyForm;\r\n// class App extends React.Component {  \r\n//     constructor(props) {  \r\n//         super(props);  \r\n//         this.state = {  \r\n//             companyName: ''  \r\n//         };  \r\n//     }  \r\n//     changeText(event) {  \r\n//         this.setState({  \r\n//             companyName: event.target.value  \r\n//         });  \r\n//     }  \r\n//     render() {  \r\n//         return (  \r\n//             <div>  \r\n//                 <h2>Simple Event Example</h2>  \r\n//                 <label htmlFor=\"name\">Enter company name: </label>  \r\n//                 <input type=\"text\" id=\"companyName\" onChange={this.changeText.bind(this)}/>  \r\n//                 <h4>You entered: { this.state.companyName }</h4>  \r\n//             </div>  \r\n//         );  \r\n//     }  \r\n// }  \r\n// export default App;  \r\n// class App extends React.Component {  \r\n//     constructor() {  \r\n//          super();        \r\n//          this.state = { displayBio: false };  \r\n//          console.log('Component this', this);  \r\n//          this.toggleDisplayBio = this.toggleDisplayBio.bind(this);  \r\n//          }  \r\n//          toggleDisplayBio(){  \r\n//              this.setState({displayBio: !this.state.displayBio});  \r\n//              }  \r\n//          render() {  \r\n//              return (  \r\n//                  <div>  \r\n//                      <h1>Welcome to JavaTpoint!!</h1>  \r\n//                      {  \r\n//                          this.state.displayBio ? (   \r\n//                              <div>  \r\n//                                  <p><h4>Javatpoint is one of the best Java training institute in Noida, Delhi, Gurugram, Ghaziabad and Faridabad. We have a team of experienced Java developers and trainers from multinational companies to teach our campus students.</h4></p>  \r\n//                                  <button onClick={this.toggleDisplayBio}> Show Less </button>  \r\n//                            </div>  \r\n//                              ) : (  \r\n//                                  <div>  \r\n//                                      <button onClick={this.toggleDisplayBio}> Read More </button>  \r\n//                                  </div>  \r\n//                         )  \r\n//                      }  \r\n//                 </div>  \r\n//            )  \r\n//        }  \r\n//    }  \r\n//    export default App;  \r\n\r\n","import React, { Component } from 'react';\r\nimport Counter from \"./counter\"\r\nclass Counters extends Component {\r\n    state = { \r\n        counters: [\r\n        {id: 1, value: 4},\r\n        {id: 2, value: 0},        \r\n        {id: 3, value: 0},\r\n        {id: 4, value: 0},\r\n\r\n        ]\r\n    };\r\nhandleIncrement = counter =>{\r\nconst counters = [...this.state.counters];\r\nconst index = counters.indexOf(counter)\r\ncounters[index] = {...counter}\r\ncounters[index].value++;\r\nthis.setState({counters});\r\n};\r\n\r\nhandleReset = () =>{\r\n const counters = this.state.counters.map(c => {\r\n    c.value = 0;\r\n    return c;\r\n})\r\nthis.setState({counters});\r\n};\r\n\r\nhandleDelete = (e) =>{\r\nconst counters = this.state.counters.filter(c => c.id !== e);\r\nthis.setState({counters})\r\n};\r\n    render() { \r\n        \r\n        return ( \r\n        <div>\r\n            <button onClick={this.handleReset} className=\"reset\">Reset</button>\r\n            {this.state.counters.map(counter => \r\n            <Counter \r\n            key={counter.id} \r\n            onDelete={this.handleDelete}\r\n            onIncrement={this.handleIncrement}\r\n            counter={counter}\r\n            >\r\n            </Counter>)}\r\n        </div> \r\n        );\r\n    }\r\n}\r\n \r\nexport default Counters;","import React, { Component } from 'react';\r\nclass Nav extends Component {\r\n    render() { \r\n        return ( \r\n            <nav className=\"App-nav\">\r\n                <ul>\r\n                    <li><a href=\"#\">Home</a></li>\r\n                    <li><a href=\"#\">My App</a></li>\r\n                </ul>\r\n            </nav>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Nav;","import React, { Component } from 'react';\r\nimport Counters from './components/counters';\r\nimport Nav from \"./components/navBar\";\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <React.Fragment>\r\n            <Nav/>\r\n            <main className=\"container\">\r\n            <Counters/>                                \r\n            </main>\r\n            </React.Fragment>\r\n         );\r\n    }\r\n}\r\n \r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import Nav from './components/navBar'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}